{"remainingRequest":"/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/node_modules/babel-loader/lib/index.js!/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/src/World/components/objects/cube.js","dependencies":[{"path":"/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/src/World/components/objects/cube.js","mtime":1666697427636},{"path":"/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/babel.config.js","mtime":1666697422773},{"path":"/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/node_modules/cache-loader/dist/cjs.js","mtime":1666697996628},{"path":"/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/node_modules/babel-loader/lib/index.js","mtime":1666697996903}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgUGxhbmVCdWZmZXJHZW9tZXRyeSwgTWVzaCwgTWVzaEJhc2ljTWF0ZXJpYWwsIE1lc2hTdGFuZGFyZE1hdGVyaWFsLCBNYXRoVXRpbHMsIFNoYWRlck1hdGVyaWFsIH0gZnJvbSAidGhyZWUiOyAvL2ltcG9ydCBzaW1wbGVWZXJ0IGZyb20gJy4uL3NoYWRlcnMvc2ltcGxlLnZlcnQnCi8vaW1wb3J0IHNpbXBsZUZyYWcgZnJvbSAnLi4vc2hhZGVycy9zaW1wbGUuZnJhZycKCmZ1bmN0aW9uIGNyZWF0ZUN1YmUoKSB7CiAgdmFyIGNvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAid2hpdGUiOwogIHZhciBwb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogWzAsIDAsIDBdOwogIHZhciBtZXNoVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogInN0YW5kYXJkIjsKICAvLyBjcmVhdGUgYSBnZW9tZXRyeQogIHZhciBnZW9tZXRyeSA9IG5ldyBQbGFuZUJ1ZmZlckdlb21ldHJ5KDIsIDIpOyAvLyBjcmVhdGUgYSBkZWZhdWx0ICh3aGl0ZSkgQmFzaWMgbWF0ZXJpYWwKCiAgdmFyIG1hdGVyaWFsID0gIiI7CgogIHN3aXRjaCAobWVzaFR5cGUpIHsKICAgIGNhc2UgInN0YW5kYXJkIjoKICAgICAgbWF0ZXJpYWwgPSBuZXcgTWVzaFN0YW5kYXJkTWF0ZXJpYWwoewogICAgICAgIGNvbG9yOiBjb2xvcgogICAgICB9KTsKICAgICAgYnJlYWs7CgogICAgY2FzZSAiYmFzaWMiOgogICAgICBtYXRlcmlhbCA9IG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7CiAgICAgICAgY29sb3I6IGNvbG9yCiAgICAgIH0pOwogICAgICBicmVhazsKICB9IC8vIGltcG9ydCBzaGFkZXIKICAvLyBjb25zdCBzaGFkZXJPbmUgPSBuZXcgU2hhZGVyTWF0ZXJpYWwoewogIC8vICAgdmVydGV4U2hhZGVyOiBzaW1wbGVWZXJ0LAogIC8vICAgZnJhZ21lbnRTaGFkZXI6IHNpbXBsZUZyYWcKICAvLyB9KQogIC8vIGNyZWF0ZSBhIE1lc2ggY29udGFpbmluZyB0aGUgZ2VvbWV0cnkgYW5kIG1hdGVyaWFsCgoKICB2YXIgY3ViZSA9IG5ldyBNZXNoKGdlb21ldHJ5LCBtYXRlcmlhbCk7IC8vY3ViZS5yb3RhdGlvbi5zZXQoLTAuNSwgLTAuMSwgMC44KTsKCiAgY3ViZS5wb3NpdGlvbi5zZXQocG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSk7CgogIGN1YmUudGljayA9IGZ1bmN0aW9uIChkZWx0YSkgey8vIGluY3JlYXNlIHRoZSBjdWJlJ3Mgcm90YXRpb24gZWFjaCBmcmFtZQogICAgLy9jdWJlLnJvdGF0aW9uLnkgKz0gTWF0aFV0aWxzLmRlZ1RvUmFkKDMwKSAqIGRlbHRhOwogIH07CgogIHJldHVybiBjdWJlOwp9CgpleHBvcnQgeyBjcmVhdGVDdWJlIH07"},{"version":3,"sources":["/Users/zhenqi/Desktop/uncanny-vue/uncanny-vue/src/World/components/objects/cube.js"],"names":["PlaneBufferGeometry","Mesh","MeshBasicMaterial","MeshStandardMaterial","MathUtils","ShaderMaterial","createCube","color","position","meshType","geometry","material","cube","set","tick","delta"],"mappings":"AAAA,SACEA,mBADF,EAEEC,IAFF,EAGEC,iBAHF,EAIEC,oBAJF,EAKEC,SALF,EAMEC,cANF,QAOO,OAPP,C,CASA;AACA;;AAEA,SAASC,UAAT,GAIE;AAAA,MAHAC,KAGA,uEAHQ,OAGR;AAAA,MAFAC,QAEA,uEAFW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAEX;AAAA,MADAC,QACA,uEADW,UACX;AACA;AACA,MAAMC,QAAQ,GAAG,IAAIV,mBAAJ,CAAwB,CAAxB,EAA2B,CAA3B,CAAjB,CAFA,CAIA;;AACA,MAAIW,QAAQ,GAAG,EAAf;;AACA,UAAQF,QAAR;AACE,SAAK,UAAL;AACEE,MAAAA,QAAQ,GAAG,IAAIR,oBAAJ,CAAyB;AAAEI,QAAAA,KAAK,EAALA;AAAF,OAAzB,CAAX;AACA;;AACF,SAAK,OAAL;AACEI,MAAAA,QAAQ,GAAG,IAAIT,iBAAJ,CAAsB;AAAEK,QAAAA,KAAK,EAALA;AAAF,OAAtB,CAAX;AACA;AANJ,GANA,CAeA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAMK,IAAI,GAAG,IAAIX,IAAJ,CAASS,QAAT,EAAmBC,QAAnB,CAAb,CAtBA,CAwBA;;AACAC,EAAAA,IAAI,CAACJ,QAAL,CAAcK,GAAd,CAAkBL,QAAQ,CAAC,CAAD,CAA1B,EAA+BA,QAAQ,CAAC,CAAD,CAAvC,EAA4CA,QAAQ,CAAC,CAAD,CAApD;;AAGAI,EAAAA,IAAI,CAACE,IAAL,GAAY,UAACC,KAAD,EAAW,CACrB;AACA;AACD,GAHD;;AAKA,SAAOH,IAAP;AACD;;AAED,SAASN,UAAT","sourcesContent":["import {\n  PlaneBufferGeometry,\n  Mesh,\n  MeshBasicMaterial,\n  MeshStandardMaterial,\n  MathUtils,\n  ShaderMaterial,\n} from \"three\";\n\n//import simpleVert from '../shaders/simple.vert'\n//import simpleFrag from '../shaders/simple.frag'\n\nfunction createCube(\n  color = \"white\",\n  position = [0, 0, 0],\n  meshType = \"standard\"\n) {\n  // create a geometry\n  const geometry = new PlaneBufferGeometry(2, 2);\n\n  // create a default (white) Basic material\n  let material = \"\";\n  switch (meshType) {\n    case \"standard\":\n      material = new MeshStandardMaterial({ color });\n      break;\n    case \"basic\":\n      material = new MeshBasicMaterial({ color });\n      break;\n  }\n\n  // import shader\n  // const shaderOne = new ShaderMaterial({\n  //   vertexShader: simpleVert,\n  //   fragmentShader: simpleFrag\n  // })\n\n  // create a Mesh containing the geometry and material\n  const cube = new Mesh(geometry, material);\n\n  //cube.rotation.set(-0.5, -0.1, 0.8);\n  cube.position.set(position[0], position[1], position[2]);\n\n\n  cube.tick = (delta) => {\n    // increase the cube's rotation each frame\n    //cube.rotation.y += MathUtils.degToRad(30) * delta;\n  };\n\n  return cube;\n}\n\nexport { createCube };\n"]}]}